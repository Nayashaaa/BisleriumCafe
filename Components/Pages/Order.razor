@page "/order"
<head>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.5.0/font/bootstrap-icons.css">
</head>

<div class="main-container">
    <div class="left-container">
        <div class="filter-buttons">
            <button @onclick="() => FilterItems(ItemType.Item)">Products</button>
            <button @onclick="() => FilterItems(ItemType.AddIn)" disabled="@(!IsProductAdded)">Add-Ins</button>
        </div>

        <div class="item-cards">
            @foreach (var item in filteredItems)
            {
                <div class="card">
                    <div class="image-holder">
                        <i class="bi-cup"></i>
                    </div>
                    <div>@item.itemName</div>
                    <div style="font-weight:bolder;">Rs.@item.itemPrice</div>
                    <button class ="add_btn" @onclick="() => AddToSelectedItems(item)">Add</button>
                </div>
            }
        </div>
    </div>

    <div class="right-container">
        <h3 style="margin-bottom: 10px;">Selected Items</h3>
        <div class="selected-items" >
            @foreach (var selectedItem in selectedItems)
            {
                <div style="display: flex; ">
                    <div style=" width:55%; height:10px; margin-left:-10px">
                        <div style="height:50%; margin-bottom:18px;  background-color:transparent;">
                            @selectedItem.Item.itemName
                        </div>
                        <div style="height:50% margin-top:8px; background-color:transparent; font-weight: bold">
                            Rs.@selectedItem.GetTotalPrice()
                        </div>
                         
                    </div>
                    <div style="padding-top:7px;width:45%; margin-left: -5px">
                        <button @onclick="() => DecreaseQuantity(selectedItem)">-</button>
                        @selectedItem.Quantity
                        <button @onclick="() => IncreaseQuantity(selectedItem)">+</button>
                        <button style="padding-top: 5px; background-color: #a60404; border: none; color: white" @onclick="() => RemoveSelectedItem(selectedItem)">X</button>
                    </div>
                </div>
            }
        </div>

        <div>
            <input type="number" style="height: 40px; border-radius: 10px;" placeholder="Enter membership ID" @bind="_memberID" />
            <button class="checkorder-btn" @onclick="CheckOrder">Check Order</button>
        </div>
        @if (_showOrderDialog)
        {
            if (_hasBenefit)
            {
                <div class="order-dialog-overlay">
                    <p>You have a free coffee remaining.</p>
                    <button @onclick="RedeemNow">Redeem Now</button>
                    <button @onclick="CancelBenefit">Cancel</button>
                </div>
            }
            else
            {
                <div class="overlay-container">
                    <div class="order-dialog-overlay">
                        <h4 style="text-align: center; font-size: 26px; margin-top: 20px; font-weight:bold;">Order Details</h4>
                        <p style="text-align: center; font-size: 24px; margin-top: 20px; font-weight:bold;">Membership ID: @_memberID</p>
                        <div class="overlay-contents">
                            <div class="overlay-firstrow" style="display:flex;">
                                <div class="overlay-selecteditem">
                                    <p>Selected Items</p>
                                </div>
                                <div class="overlay-list">
                                    <ul>
                                        @foreach (var selectedItem in selectedItems)
                                        {
                                            <li>@selectedItem.Item.itemName - Rs.@selectedItem.GetTotalPrice()</li>
                                        }
                                    </ul>
                                </div>
                            </div>
                            <div class="prices">
                                <div style="display: flex;">
                                    <div class="grosstotal">
                                        <p>Gross Total</p>
                                    </div>
                                    <div class="calculategross">
                                        <p>Rs.@CalculateGrossTotal()</p>
                                    </div>
                                </div>
                                <div style="display: flex;">
                                    <div class="discount">
                                        <p>Discount Amount</p>
                                    </div>
                                    <div class="calculatedis">
                                        <p>Rs.@CalculateDiscountAmount()</p>
                                    </div>
                                </div>
                                <div style="display: flex;">
                                    <div class="net-total">
                                        <p>Net Total</p>
                                    </div>
                                    <div class="calculate-net">
                                        <p>Rs.@CalculateNetTotal()</p>
                                    </div>
                                </div>

                            </div>

                        </div>
                        <div class="overlay-btn">
                            <button class="place-order" @onclick="PlaceOrder">Place Order</button>
                            <button class="cancel" @onclick="CancelOrder">Cancel</button>
                        </div>
                    </div>
                </div>
               
            }
        }


    </div>
</div>



@code {
    private long _memberID { get; set; }
    private bool _showOrderDialog = false;
    private bool IsProductAdded => selectedItems.Any();
    private bool _hasBenefit { get; set; }
    List<int>iQty{ get; set; }
    List<Item> items = ItemService.GetItem();
    List<Item> filteredItems = new List<Item>();
    List<SelectedItem> selectedItems = new List<SelectedItem>();

    protected override void OnInitialized()
    {
        FilterItems(ItemType.Item);
    }

    void FilterItems(ItemType itemType)
    {
        filteredItems = items.Where(i => i.itemType == itemType).ToList();
    }

    void AddToSelectedItems(Item selectedItem)
    {
        var existingSelectedItem = selectedItems.FirstOrDefault(i => i.Item.itemName == selectedItem.itemName);

        if (existingSelectedItem != null)
        {
            existingSelectedItem.Quantity++;
        }
        else
        {
            var newSelectedItem = new SelectedItem
                {
                    Item = selectedItem,
                    Quantity = 1
                };
            selectedItems.Add(newSelectedItem);
        }

        StateHasChanged();
    }

    void IncreaseQuantity(SelectedItem selectedItem)
    {
        selectedItem.Quantity++;
    }

    void DecreaseQuantity(SelectedItem selectedItem)
    {
        if (selectedItem.Quantity > 1)
        {
            selectedItem.Quantity--;
        }
    }

    void RemoveSelectedItem(SelectedItem selectedItem)
    {
        selectedItems.Remove(selectedItem);
        StateHasChanged();
    }

    float getDiscount()
    {
        int transactionCount = TransactionService.GetTransactionByUserId(_memberID)
            .Select(transaction => transaction.SalesDate.Date)
            .Distinct()
            .Count(date => (DateTime.Now - date).Days <= 30); 

        float discountPercentage = (transactionCount > 22) ? 10 : 0;
        return discountPercentage;
    }


    void CheckOrder()
    {
        bool isExistingMember = TransactionService.GetTransactionByUserId(_memberID).Any();

        List<Member> members = MemberService.GetMember();
        var member = members.FirstOrDefault(x => x.UserID == _memberID);


        int transactionCount = TransactionService.GetTransactionByUserId(_memberID)
            .Select(transaction => transaction.SalesDate.Date)
            .Distinct()
            .Count(date => (DateTime.Now - date).Days <= 30);

        float discountPercentage = (transactionCount > 22) ? 10 : 0;

        float netTotal = CalculateNetTotal();

        float discountedNetTotal = netTotal * (1 - discountPercentage / 100);

        if (member != null)
        {
            _hasBenefit = member.BenefitToClaim;
        }
        UpdateNetTotalInSelectedItems(discountedNetTotal);

        _showOrderDialog = true;
    }

    void UpdateNetTotalInSelectedItems(float discountedNetTotal)
    {
        foreach (var selectedItem in selectedItems)
        {
            selectedItem.NetTotal = discountedNetTotal;
        }
    }

    void PlaceOrder()
    {
        var transactionData = new Transaction
            {
                TransactionId = Guid.NewGuid(),
                Items = selectedItems.Select(si => new Item
                {
                    itemName = si.Item.itemName, 
                    itemPrice = si.Item.itemPrice,
                }).ToList(),
                MemberId = _memberID,
                ItemCount = selectedItems.Select(si => si.Quantity).ToList(),
                SalesDate = DateTime.Now,
                OrderTotal = CalculateNetTotal(),
            };

        List<Transaction> transactions = TransactionService.GetTransaction();

        transactions.Add(transactionData);

        TransactionService.SaveTransaction(transactions);

        // Check and update member information
        MemberService.CreateMember(_memberID);
        MemberService.UpdateBenifitStatus(_memberID);


        MemberService.UpdateTransactionCount(_memberID);

        selectedItems.Clear();
        _showOrderDialog = false;
    }




    void CancelOrder()
    {
        _showOrderDialog = false;
    }

    float CalculateGrossTotal()
    {
        return selectedItems.Sum(si => si.GetTotalPrice());
    }

    float CalculateDiscountAmount()
    {
        return (getDiscount() / 100) * CalculateGrossTotal();
    }

    float CalculateNetTotal()
    {
        return CalculateGrossTotal() - CalculateDiscountAmount();
    }

    void RedeemNow()
    {
        List<Member> members = MemberService.GetMember();
        Member member = members.FirstOrDefault(x => x.UserID == _memberID);
        member.BenefitToClaim = false;
        selectedItems.Clear();
        _showOrderDialog = false;
        MemberService.SaveMember(members);
    }

    void CancelBenefit()
    {
        selectedItems.Clear();
        _showOrderDialog = false;
    }


    public class SelectedItem
    {
        public Item Item { get; set; }
        public int Quantity { get; set; }
        public float NetTotal { get; set; }

        public float GetTotalPrice()
        {
            return Item.itemPrice * Quantity;
        }
    }
}
